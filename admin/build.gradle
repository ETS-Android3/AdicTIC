plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

def keystorePropertiesFile = file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    signingConfigs {
        AdicTIC {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    compileSdkVersion 31

    def code = getCustomVersionCode()
    defaultConfig {
        applicationId "com.adictic.admin"
        minSdkVersion 24
        targetSdkVersion 31
        versionCode code
        versionName "1.0."+code
        signingConfig signingConfigs.AdicTIC
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            ndk {
                abiFilters "" // includes ARM SO files only, so no x86 SO file
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        applicationVariants.all{
            variant ->
                variant.outputs.each{
                    output->
                        output.outputFileName = "adictic-admin_${variant.versionName}.apk"
                }
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/kotlinx-io.kotlin_module', 'META-INF/atomicfu.kotlin_module', 'META-INF/kotlinx-coroutines-io.kotlin_module', 'META-INF/kotlinx-coroutines-core.kotlin_module']
        }
    }
    lint {
        abortOnError false
        checkReleaseBuilds true
    }
}

def getCustomVersionCode() {
    def versionPropsFile = file('version.properties')
    def code
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        List<String> runTasks = gradle.startParameter.getTaskNames()
        def value = 0
        for (String item : runTasks)
            if (item.contains("assembleRelease")) {
                value = 1
            }
        if (value == 1) {
            code = Integer.parseInt(versionProps['VERSION_CODE']).intValue() + value
            versionProps['VERSION_CODE'] = code.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        } else
            code = Integer.parseInt(versionProps['VERSION_CODE']).intValue()
        return code
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }
}

dependencies {
    //Modules
    implementation project(path: ':libraries:common')
    implementation project(path: ':libraries:persistentcookie')
    implementation project(path: ':libraries:jitsiVideocall')

    //Room
    def room_version = "2.4.1"

    api "androidx.room:room-runtime:$room_version"
    api "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-rxjava3:$room_version"

    //Hilt
    def hilt_version = "2.38.1"

    api "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    //RxJava
    implementation 'io.reactivex.rxjava3:rxjava:3.0.0'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
}